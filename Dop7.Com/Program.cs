using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

double x = 0, y = 0, z = 0, w = 0; // Объявление переменных x,y,z,w и присвоение вещественного типа "double"
Console.WriteLine("Введите значение х:"); // просьба пользователя ввести значение x.

try
{
    x = Convert.ToDouble(Console.ReadLine()); // преобразование переменной x к вещественному типу double.
    y = Math.Sqrt((x + 3) / (x - 3)); // вычисление квадратного корня из y.
}
catch (Exception e) //оператор, задающийся для различных исключений.
{
    Console.WriteLine(e.Message); //Возвращает сообщение, описывающее текущее исключение.
}

Console.WriteLine("Введите значение z:"); //просьба пользователя ввести значение z
z = Convert.ToDouble(Console.ReadLine()); // преобразование переменной z к вещественному типу double.

Console.WriteLine("Введите значение w:"); //просьба пользователя ввести значение w
w = Convert.ToDouble(Console.ReadLine()); // преобразование переменной w к вещественному типу double.

Console.WriteLine("Результат Sqrt: {0}", y); //вывод на экран значения переменной y после выполнения операции с корнем.

y = Math.Abs(x); // вычисление модуля локального значения x

Console.WriteLine("Результат Abs: {0}", y); //вывод на экран значение переменной y после выполнения операции с модулем.

y = Math.Acos(x); // вычисление арккосинуса от локального значения x

Console.WriteLine("Результат Acos: {0}", y);  //вывод на экран значения переменной y после выполнения операции вычисления арккосинуса от x.

y = Math.Acosh(x); // вычисление гиперболического косинуса от локального значения x

Console.WriteLine("Результат Acosh: {0}", y); //вывод на экран значения переменной y после выполнения операции вычисления гиперболического косинуса от x.

y = Math.Asin(x); // вычисление арксинуса от локального значения x

Console.WriteLine("Результат Asin: {0}", y); //вывод на экран значения переменной y после выполнения операции вычисления арксинуса от x.

y = Math.Asinh(x); //возвращает угол, гиперболический синус которого равен указанному числу.

Console.WriteLine("Результат Asinh: {0}", y); // вывод на экран значения переменной y после выполнения операции asinh.

y = Math.Atan(x); // вычисление арктангенса от локального значения x

Console.WriteLine("Результат Atan: {0}", y); //вывод на экран значения переменной y после выполнения операции вычисления арктангенса от x.


y = Math.Atan2(x, z); //возвращает угол, тангенс которого равен отношению двух указанных чисел(x,z).

Console.WriteLine("Результат Atan2: {0} ({1}, {2})", y, x, z); // вывод на экран вычисленного значения переменной y и значений x,z(в сколбочках)

y = Math.Atanh(x); //Возвращает угол, гиперболический тангенс которого равен указанному числу(в нашем случае x)

Console.WriteLine("Результат Atanh: {0}", y); //вывод на экран значения переменной y после выполнения операции вычисления Atanh от x.


long t = 0; // объявление переменной t и присвоение целого типа long.
t = Math.BigMul((int)x, (int)z); // вычисление наибольшего из двух указанных чисел, которым присвоен целый тип int

Console.WriteLine("Результат BigMul: {0} ({1} {2})", t, (int)x, (int)z); //вывод на экран значения переменной t после выполнения операции вычисления наибольшего из двух указанных чисел.

y = Math.BitDecrement(x); //возвращает ближайшее самое маленькое значение, которое меньше, чем x

Console.WriteLine("Результат BitDecrement: {0} ({1})", y, x); //вывод на экран значения переменной y после выполнения операции BitDecrement и указанного значения переменной x.

y = Math.BitIncrement(x); //возвращает ближайшее самое большое значение, превышающее x

Console.WriteLine("Результат BitIncrement: {0} ({1})", y, x); //вывод на экран значения переменной y после выполнения операции BitIncrement и указанного значения переменной x.


y = Math.Cbrt(x); //Возвращает кубический корень из указанного числа(x)

Console.WriteLine("Результат Cbrt: {0} ({1})", y, x); //вывод на экран значения переменной y после выполнения операции Cbrt(x) и указанного значения переменной x.

y = Math.Ceiling(x); //возвращает наименьшее целое число, которое больше или равно указанному числу(x)

Console.WriteLine("Результат Ceiling: {0} ({1})", y, x); //вывод на экран значения переменной y после выполнения операции Ceiling(x) и указанного значения переменной x.

byte b = 0; // объявление переменной b целого типа byte
b = Math.Clamp((byte)x, (byte)z, (byte)w); //зажимает число между минимальным и максимальным значением и присвоение лок.переменным x,z,m целого типа byte

Console.WriteLine("Результат Clamp: {0} ({1} {2} {3})", b, (byte)x, (byte)z, (byte)w); //вывод на экран значения выделенного числа между минимальным и максимальным значением указанных переменных.

y = Math.CopySign(x, z); // выделение наименьшего значения из указанных переменных x,z.

Console.WriteLine("Результат CopySign: {0} ({1} {2})", y, x, z); // вывод на экран результата выделения наименьшего значения из указанных переменных x,z


y = Math.Cos(x); //вычисление косинуса из x

Console.WriteLine("Результат Cos: {0} ({1})", y, x); //вывод на экран результата операции вычисления косинуса из x и указанного значения x

y = Math.Cosh(x); //вычисление гиперболического косинуса из x

Console.WriteLine("Результат Cosh {0} ({1})", y, x); //вывод на экран результата операции вычисления гиперболического косинуса косинуса из x и указанного значения x

int output = 0; //возвращает стандартный поток вывода с целым типом int.

y = Math.DivRem((int)x, (int)z, out output); //Вычисляет частное двух чисел и возвращает остаток в выходном параметре.

Console.WriteLine("Результат DivRem {0} ({1} {2}) result = {3}", y, x, z, output); // вывод на экран результата операции вычисления DivRem  и указанных значений перем. x,z


y = Math.E; //представляет основание натурального логарифма, определяемое константой

Console.WriteLine("Результат E {0}", y); // вывод на экран значения переменной y, которой присвоено значение экспоненты.

y = Math.Exp(x); // Возвращает e, возведенное в указанную степень.

Console.WriteLine("Результат Exp {0} ({1})", y, x); // вывод на экран результата операции вычисления Exp и указанного значения переменной x

y = Math.Floor(x); //Возвращает наибольшее целое число, которое меньше или равно указанному числу(x)

Console.WriteLine("Результат Exp {0} ({1})", y, x); // вывод на экран результата операции вычисления Floor и указанного значения переменной x

y = Math.FusedMultiplyAdd(x, z, w); //Возвращает значение (x * z) + w, округленное в рамках одной тернарной операции.

Console.WriteLine("Результат FusedMultiplyAdd(x*z+w) {0} ({1} {2} {3} )", y, x, z, w); // вывод на экран результата операции вычисления FusedMultiplyAdd и указанных значений x,z,w 

y = Math.IEEERemainder(x, z); //Возвращает остаток от деления одного указанного числа на другое указанное число(x,z)

Console.WriteLine("Результат IEEERemainder {0} ({1} {2})", y, x, z);  // вывод на экран результата операции вычисления IEEERemainder и указанных значений x,z

y = Math.ILogB(x); //Возвращает целочисленный логарифм с основанием 2 указанного числа(x)

Console.WriteLine("Результат ILogB {0} ({1})", y, x);// вывод на экран результата операции вычисления ILogB и указанного значения x


y = Math.Log(x); // вычисление логарифма указанного числа(x)

Console.WriteLine("Результат Log {0} ({1})", y, x); // вывод на экран результата операции вычисления логарифма от значения x.


y = Math.Log10(x); // вычисление логарифма по основанию 10 от указанного числа(x)

Console.WriteLine("Результат Log10 {0} ({1})", y, x); // вывод на экран результата операции вычисления логарифма по основанию 10 от значения x

y = Math.Log2(x); // вычисление логарифма по основанию 2 от указанного числа(x)

Console.WriteLine("Результат Log2 {0} ({1})", y, x); // вывод на экран результата операции вычисления логарифма по основанию 2 от значения x


y = Math.Max(x, z); // выбор максимального из двух указанных чисел

Console.WriteLine("Результат Max {0} ({1} {2})", y, x, z); // вывод на экран результата выполения операции max и указанных значений переменных x,z

y = Math.MaxMagnitude(x, z);

Console.WriteLine("Результат MaxMagnitude {0} ({1} {2})", y, x, z);

y = Math.Min(x, z);

Console.WriteLine("Результат Min {0} ({1} {2})", y, x, z);

y = Math.MinMagnitude(x, z); //Возвращает большую величину из двух чисел двойной точности с плавающей запятой.

Console.WriteLine("Результат MinMagnitude {0} ({1} {2})", y, x, z); // вывод на экран результата выполения операции MinMagnitude и указанных значений переменных x,z

y = Math.PI; // присвоение локальной переменной y математического значения числа PI.

Console.WriteLine("Результат PI {0} ", y); // вывод на экран значения  лок.переменной y, которой присвоено значение числа PI

y = Math.Pow(x, z); // возведение в степень z указанного числа x.

Console.WriteLine("Результат Pow {0} ({1} {2})", y, x, z); // вывод на экран вычисленного значения возведения в степень; вывод на экран указанных значений x,z

y = Math.ReciprocalEstimate(x); //возвращает оценку взаимности указанного числа.

Console.WriteLine("Результат ReciprocalEstimate {0} ({1})", y, x); // вывод на экран результата выполнения операции ReciprocalEstimate и указанных чисел y,x

y = Math.ReciprocalSqrtEstimate(x); //возвращает оценку обратного квадратного корня указанного числа.

Console.WriteLine("Результат ReciprocalSqrtEstimate {0} ({1})", y, x); // вывод на экран результата выполнения операции ReciprocalSqrtEstimate и указанных чисел y,x

y = Math.Round(x); // округление введенного значения x.

Console.WriteLine("Результат Round {0} ({1})", y, x); // вывод на экран результата выполнения операции округление введенного числа x

y = Math.ScaleB(x, (int)z); //Возвращает значение x * 2^z, вычисленное эффективно.

Console.WriteLine("Результат ScaleB (x*2^z) {0} ({1} {2})", y, x, (int)z); // вывод на экран результата выполнения операции ScaleB и указанных чисел x и z( целого типа int)  


y = Math.Sign(x); //Возвращает целое число, указывающее знак числа.

Console.WriteLine("Результат Sign {0} ({1})", y, x); // вывод на экран результата выполнения операции Sign и указанных чисел x,y


y = Math.Sin(x); // операция вычисления синуса от указанного x

Console.WriteLine("Результат Sin {0} ({1})", y, x); // вывод на экран результата выполнения операции вычисления синуса от x и указанных чисел x,y

var d = Math.SinCos(x); // объявление переменной d;возвращение синус и косину указанного угла

Console.WriteLine("Результат SinCos {0} ({1})", y, d.ToString()); //// вывод на экран результата выполнения операции вычисления SinCos и преобразование результата в строковый тип string

y = Math.Sinh(x); // вычисление гиперболического синуса от x

Console.WriteLine("Результат Sinh {0} ({1})", y, x);  // вывод на экран результата выполнения операции вычисления гиперболического синуса от x

y = Math.Tan(x); // вычисление тангенса от x

Console.WriteLine("Результат Tan {0} ({1})", y, x); // вывод на экран результата выполнения операции вычисления тангенса от x 


y = Math.Tanh(x); // вычисление  гиперболического тангенса от x

Console.WriteLine("Результат Tanh {0} ({1})", y, x); // вывод на экран результата выполнения операции вычисления гиперболического тангенса от x 


y = Math.Tau; //Представляет число радианов в полном обороте, заданное константой τ.

Console.WriteLine("Результат Tau {0}", y); // // вывод на экран результата выполнения операции вычисления Tau


y = Math.Truncate(x); // вычисляет целую часть числа.

Console.WriteLine("Результат Truncate {0} ({1})", y, x); // вывод на экран результата выполнения операции вычисления целой части от числа x; вывод указанного числа x
